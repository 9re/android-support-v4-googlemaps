diff --git lib/android-14.jar lib/android-14.jar
deleted file mode 100644
index edd1c82..0000000
Binary files lib/android-14.jar and /dev/null differ
diff --git lib/maps-14.jar lib/maps-14.jar
deleted file mode 100644
index 36317e3..0000000
Binary files lib/maps-14.jar and /dev/null differ
diff --git v4/java/android/support/v4/app/Fragment.java v4/java/android/support/v4/app/Fragment.java
index d208f7d..a76c08d 100644
--- v4/java/android/support/v4/app/Fragment.java
+++ v4/java/android/support/v4/app/Fragment.java
@@ -541,9 +541,8 @@ public class Fragment implements ComponentCallbacks, OnCreateContextMenuListener
     /**
      * Return the Activity this fragment is currently associated with.
      */
-    @SuppressWarnings("unchecked")
-    final public <FragmentActivityImpl extends Activity & FragmentActivityFeature> FragmentActivityImpl getActivity() {
-        return (FragmentActivityImpl) mActivity;
+    final public Activity getActivity() {
+        return mActivity;
     }
     <FragmentActivityImpl extends Activity & FragmentActivityFeature> void setActivity(FragmentActivityImpl activity) {
         mActivity = activity;
@@ -710,7 +709,7 @@ public class Fragment implements ComponentCallbacks, OnCreateContextMenuListener
         if (mHasMenu != hasMenu) {
             mHasMenu = hasMenu;
             if (isAdded() && !isHidden()) {
-                getActivity().supportInvalidateOptionsMenu();
+                ((FragmentActivityFeature)getActivity()).supportInvalidateOptionsMenu();
             }
         }
     }
@@ -728,7 +727,7 @@ public class Fragment implements ComponentCallbacks, OnCreateContextMenuListener
         if (mMenuVisible != menuVisible) {
             mMenuVisible = menuVisible;
             if (mHasMenu && isAdded() && !isHidden()) {
-                getActivity().supportInvalidateOptionsMenu();
+                ((FragmentActivityFeature) getActivity()).supportInvalidateOptionsMenu();
             }
         }
     }
@@ -773,7 +772,7 @@ public class Fragment implements ComponentCallbacks, OnCreateContextMenuListener
             throw new IllegalStateException("Fragment " + this + " not attached to Activity");
         }
         mCheckedForLoaderManager = true;
-        mLoaderManager = getActivity().getLoaderManager(mIndex, mLoadersStarted, true);
+        mLoaderManager = ((FragmentActivityFeature)getActivity()).getLoaderManager(mIndex, mLoadersStarted, true);
         return mLoaderManager;
     }
     
@@ -785,7 +784,7 @@ public class Fragment implements ComponentCallbacks, OnCreateContextMenuListener
         if (mActivity == null) {
             throw new IllegalStateException("Fragment " + this + " not attached to Activity");
         }
-        getActivity().startActivityFromFragment(this, intent, -1);
+        ((FragmentActivityFeature)getActivity()).startActivityFromFragment(this, intent, -1);
     }
     
     /**
@@ -796,7 +795,7 @@ public class Fragment implements ComponentCallbacks, OnCreateContextMenuListener
         if (mActivity == null) {
             throw new IllegalStateException("Fragment " + this + " not attached to Activity");
         }
-        getActivity().startActivityFromFragment(this, intent, requestCode);
+        ((FragmentActivityFeature)getActivity()).startActivityFromFragment(this, intent, requestCode);
     }
     
     /**
@@ -981,7 +980,7 @@ public class Fragment implements ComponentCallbacks, OnCreateContextMenuListener
             mLoadersStarted = true;
             if (!mCheckedForLoaderManager) {
                 mCheckedForLoaderManager = true;
-                mLoaderManager = getActivity().getLoaderManager(mIndex, mLoadersStarted, false);
+                mLoaderManager = ((FragmentActivityFeature)getActivity()).getLoaderManager(mIndex, mLoadersStarted, false);
             }
             if (mLoaderManager != null) {
                 mLoaderManager.doStart();
@@ -1071,7 +1070,7 @@ public class Fragment implements ComponentCallbacks, OnCreateContextMenuListener
         //        + " mLoaderManager=" + mLoaderManager);
         if (!mCheckedForLoaderManager) {
             mCheckedForLoaderManager = true;
-            mLoaderManager = getActivity().getLoaderManager(mIndex, mLoadersStarted, false);
+            mLoaderManager = ((FragmentActivityFeature)getActivity()).getLoaderManager(mIndex, mLoadersStarted, false);
         }
         if (mLoaderManager != null) {
             mLoaderManager.doDestroy();
@@ -1351,10 +1350,10 @@ public class Fragment implements ComponentCallbacks, OnCreateContextMenuListener
             mLoadersStarted = false;
             if (!mCheckedForLoaderManager) {
                 mCheckedForLoaderManager = true;
-                mLoaderManager = getActivity().getLoaderManager(mIndex, mLoadersStarted, false);
+                mLoaderManager = ((FragmentActivityFeature)getActivity()).getLoaderManager(mIndex, mLoadersStarted, false);
             }
             if (mLoaderManager != null) {
-                if (!getActivity().isRetaining()) {
+                if (!((FragmentActivityFeature)getActivity()).isRetaining()) {
                     mLoaderManager.doStop();
                 } else {
                     mLoaderManager.doRetain();
diff --git v4/java/android/support/v4/app/FragmentManager.java v4/java/android/support/v4/app/FragmentManager.java
index 8bbcdb8..985514d 100644
--- v4/java/android/support/v4/app/FragmentManager.java
+++ v4/java/android/support/v4/app/FragmentManager.java
@@ -1044,7 +1044,7 @@ final class FragmentManagerImpl<FragmentActivityImpl extends Activity & Fragment
                             if (!f.mRetaining) {
                                 makeInactive(f);
                             } else {
-                                f.setActivity(null);
+                                f.setActivity((FragmentActivityImpl)null);
                                 f.mFragmentManager = null;
                             }
                         }
